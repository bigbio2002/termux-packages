diff --git a/gcc/config/aarch64/aarch64-tuning-flags.def b/gcc/config/aarch64/aarch64-tuning-flags.def
index ccef3c09273..cc574b41fb6 100644
--- a/gcc/config/aarch64/aarch64-tuning-flags.def
+++ b/gcc/config/aarch64/aarch64-tuning-flags.def
@@ -55,4 +55,8 @@ AARCH64_EXTRA_TUNING_OPTION ("no_ldp_stp_qregs", NO_LDP_STP_QREGS)
 
 AARCH64_EXTRA_TUNING_OPTION ("matched_vector_throughput", MATCHED_VECTOR_THROUGHPUT)
 
+/* Do not emit outlined libgcc helper calls for atomic operations
+   for non-LSE targets.  */
+AARCH64_EXTRA_TUNING_OPTION ("no_outline_atomics", NO_OUTLINE_ATOMICS)
+
 #undef AARCH64_EXTRA_TUNING_OPTION
diff --git a/gcc/config/aarch64/aarch64.h b/gcc/config/aarch64/aarch64.h
index 74236c3cffd..695d56c50ef 100644
--- a/gcc/config/aarch64/aarch64.h
+++ b/gcc/config/aarch64/aarch64.h
@@ -104,8 +104,14 @@
 
 
 /* Emit calls to libgcc helpers for atomic operations for runtime detection
-   of LSE instructions.  */
-#define TARGET_OUTLINE_ATOMICS (aarch64_flag_outline_atomics)
+   of LSE instructions.  Use if explicitly asked for by the option.
+   Alternatively, use it by default unless CPU tuning explicitly disables
+   it.  */
+#define TARGET_OUTLINE_ATOMICS					\
+  (aarch64_flag_outline_atomics == 1				\
+    || (aarch64_flag_outline_atomics == 2			\
+	  && ((aarch64_tune_params.extra_tuning_flags		\
+	      & AARCH64_EXTRA_TUNE_NO_OUTLINE_ATOMICS) == 0)))
 
 /* Align definitions of arrays, unions and structures so that
    initializations and copies can be made more efficient.  This is not
diff --git a/gcc/config/aarch64/aarch64.opt b/gcc/config/aarch64/aarch64.opt
index 37181b5baca..d99d14c137d 100644
--- a/gcc/config/aarch64/aarch64.opt
+++ b/gcc/config/aarch64/aarch64.opt
@@ -256,7 +256,7 @@ TargetVariable
 long aarch64_stack_protector_guard_offset = 0
 
 moutline-atomics
-Target Mask(OUTLINE_ATOMICS) Save
+Target Var(aarch64_flag_outline_atomics) Init(2) Save
 Generate local calls to out-of-line atomic operations.
 
 -param=aarch64-sve-compare-costs=
